# -*- coding: utf-8 -*-
"""Retail_Project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UtzfttknU9073M5YfKvaJm2h9uTtzhd6

## **BUSINESS SCENARIO**


A retail chain operating across multiple cities in India wants to improve its decision-making by analysing customer purchase behaviour. The company has recently expanded into Tier-2 and Tier-3 cities and is experiencing challenges in understanding customer preferences, seasonal demand, and city-level sales performance. The raw transactional data from their stores is messy, incomplete, and inconsistent, making it difficult for business analysts to directly use it for insights.
The company’s AI team has approached you (the participants) to preprocess the data, clean it, and visualize key patterns that can help management make better marketing and inventory decisions.
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import MinMaxScaler
from matplotlib.ticker import FuncFormatter
import warnings

warnings.filterwarnings('ignore')
data = pd.read_csv("/content/Retail_Transactions_2000.csv")

data.head()

print(f"This data set contain {data.shape[0]} rows and {data.shape[1]} columns")

print("The data set conatin these columns:")
print(50 *"--")
print(f"{data.columns}")

print("Basic info about data: ")
print(50*"--")
data.info()

"""# **PART A: DATA PREPROCESSING**

**1. Identifying Missing Values**
"""

data.isnull().sum()[data.isnull().sum() > 0]

print("No missing value was found in the data set")

"""**2. Data Cleaning**"""

data[data.duplicated()]

print("No duplicate rows was found in the data set")

data["Gender"].replace(["m", "MALE", "Male"], "Male", inplace=True)

data["Gender"].replace(["f", "FEMALE", "Female"], "Female", inplace=True)

data[(data["Price"] <= 0) | (data["Quantity"] <= 0)]

print("There was no negative or positive vlaue in Price and Quantity column")

"""**3. Feature Engineering**"""

print(f"The total amount of all sales is ₹{data["TotalAmount"].sum():,}")

data["PurchaseDate"] = pd.to_datetime(data["PurchaseDate"])
data["Month"] = data["PurchaseDate"].dt.month_name()
data["DayOfWeek"] = data["PurchaseDate"].dt.day_of_week
data.head()

bins = [0, 10, 20, 30, 40, 50, 60, 100]
labels = ['0-10', '10-20', '20-30', '30-40', '40-50', '50-60', '60+']
data["Age_Group"] = pd.cut(data['Age'], bins=bins, labels=labels, right=False)
data.head()

"""**4. Encoding & Transformation**"""

data["Gender"].replace("Male", "1", inplace=True)
data["Gender"].replace("Female", "0", inplace=True)
data["Gender"].replace("Other", "-1", inplace=True)
data["Gender"] = data["Gender"].astype(int)

df = data.copy()
data.head()

distinct_cities = data["City"].unique()
distinct_cities

data["City"].replace(distinct_cities, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], inplace=True)

scaler = MinMaxScaler()
data[["Age", "Price", "TotalAmount"]] = scaler.fit_transform(data[["Age", "Price", "TotalAmount"]])
data.head()

"""**5. Final verification**"""

data.isnull().sum()[data.isnull().sum() > 0]

print(f"No column with missing values wa found")

data.to_csv("Retail_Cleaned.csv", index=False)

"""# **PART B: DATA VISUALIZATION**

**1. Customer Demographics**
"""

age_group = data["Age_Group"].to_frame()
sns.countplot(x="Age_Group", data=age_group)
plt.title("Age Distribution Of Customers", fontsize=15)
plt.xlabel("Age Group", fontsize=12)
plt.ylabel("Count", fontsize=12)
plt.show()

gender = data["Gender"].to_frame()
sns.countplot(x="Gender", data=gender)
plt.title("Gender Distribution Of Customers", fontsize=15)
plt.xlabel("Gender(1 => Male, 0 => Female, -1 => Other)", fontsize=12)
plt.ylabel("Count", fontsize=12)
plt.show()

data.groupby(by="Gender")["Gender"].count()

cities = data["City"].to_frame()
sns.countplot(x="City", data=cities)
plt.title("Customer count by top 10 cities", fontsize=15)
plt.xlabel(f"Cities\n {['Bengaluru(0)', 'Pune(1)', 'Hyderabad(2)', 'Chennai(3)', 'Delhi(4)']}, \n ,{['Jaipur(5)','Lucknow(6)', 'Ahmedabad(7)', 'Kolkata(8)', 'Mumbai(9)']}", fontsize=10)
plt.ylabel("Count", fontsize=10)
plt.show()
cities.value_counts().sort_index()

"""**2. Sales Insights**"""

product_category = data["ProductCategory"].value_counts().to_frame()
sns.barplot(x="ProductCategory", y="count",data=product_category)
plt.title("Top Sales by category", fontsize=15)
plt.xlabel("Category", fontsize=12)
plt.ylabel("Count", fontsize=12)
plt.show()
product_category

months_order = ['January', 'February', 'March', 'April', 'May', 'June',
                'July', 'August', 'September', 'October', 'November', 'December']
sales_trend_monthly =  df.groupby("Month")["TotalAmount"].sum().to_frame().reset_index()
sales_trend_monthly['Month'] = pd.Categorical(sales_trend_monthly['Month'], categories=months_order, ordered=True)
sales_trend_monthly = sales_trend_monthly.sort_values('Month')
sales_trend_monthly

plt.figure(figsize=(12, 5))
ax = plt.gca()
ax.plot(sales_trend_monthly["Month"], sales_trend_monthly["TotalAmount"], marker="o")
ax.set_title("Monthly sales trend", fontsize=15)
ax.yaxis.set_major_formatter(FuncFormatter(lambda x, _: f"₹{x:,}".format(x)))
ax.set_xlabel("Months", fontsize=11)
ax.set_ylabel("Sales", fontsize=11)
plt.show()

payment_mode_utilization = data.groupby("PaymentMode")["PaymentMode"].count()/data.shape[0]
payment_mode_utilization

ax = plt.gca()
ax.pie(payment_mode_utilization, labels=payment_mode_utilization.index, autopct="%1.2f%%")
ax.set_title("Payment Mode Usage", fontsize=15)
plt.show()

"""**3. Advanced Insights**"""

avg_spend_age_group = df.groupby(by="Age_Group")["TotalAmount"].mean().to_frame()
avg_spend_age_group

sns.barplot(data=avg_spend_age_group)
plt.title("Average Spend per customer by Age Group")

cities = df.groupby(by="City")["TotalAmount"].sum().to_frame()
sns.barplot(x=cities.index, y=cities["TotalAmount"], data=cities)
plt.title("City wise revenue contribution", fontsize=15)
plt.xlabel("Cities", fontsize=10)
plt.ylabel("Revenue", fontsize=10)
plt.xticks(rotation=45)
plt.show()

data_pivot = pd.crosstab(df['ProductCategory'], df['PaymentMode'])

plt.figure(figsize=(10, 6))
sns.heatmap(data_pivot, annot=True, fmt='d', cmap='YlGnBu')
plt.title('Heatmap of Product Category vs Payment Method')
plt.xlabel('Payment Mode')
plt.ylabel('Product Category')
plt.show()